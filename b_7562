import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

// Position 클래스는 나이트의 위치를 나타내는 x, y 좌표를 저장합니다.
class Position {
    int x, y;
    Position(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class Main {
    // 나이트가 이동할 수 있는 8가지 방향을 정의합니다.
    static int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
    static int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};
    static int l; // 체스판의 한 변의 길이
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int tc = sc.nextInt(); // 테스트 케이스 수를 입력받습니다.
        
        for (int t = 0; t < tc; t++) {
            l = sc.nextInt(); // 체스판의 크기를 입력받습니다.
            // 시작 위치와 목표 위치를 입력받습니다.
            Position start = new Position(sc.nextInt(), sc.nextInt());
            Position end = new Position(sc.nextInt(), sc.nextInt());
            
            // BFS를 통해 최소 이동 횟수를 출력합니다.
            System.out.println(bfs(start, end));
        }
        sc.close();
    }
    
    // BFS를 사용하여 최소 이동 횟수를 구하는 메소드
    static int bfs(Position start, Position end) {
        Queue<Position> queue = new LinkedList<>();
        boolean[][] visited = new boolean[l][l]; // 방문 여부를 체크하는 배열
        int[][] distance = new int[l][l]; // 시작점으로부터의 거리를 저장하는 배열
        
        queue.offer(start);
        visited[start.x][start.y] = true; // 시작점을 방문 처리
        
        while (!queue.isEmpty()) {
            Position current = queue.poll();
            
            // 현재 위치가 목표 위치라면 현재까지의 거리를 반환
            if (current.x == end.x && current.y == end.y) {
                return distance[current.x][current.y];
            }
            
            // 나이트가 이동할 수 있는 8가지 방향을 탐색
            for (int i = 0; i < 8; i++) {
                int nx = current.x + dx[i];
                int ny = current.y + dy[i];
                
                // 새로운 위치가 체스판 내에 있고 아직 방문하지 않았다면
                if (nx >= 0 && nx < l && ny >= 0 && ny < l && !visited[nx][ny]) {
                    queue.offer(new Position(nx, ny));
                    visited[nx][ny] = true; // 새 위치를 방문 처리
                    distance[nx][ny] = distance[current.x][current.y] + 1; // 거리를 업데이트
                }
            }
        }
        return -1;  // 목표 위치에 도달할 수 없는 경우 -1 반환
    }
}
